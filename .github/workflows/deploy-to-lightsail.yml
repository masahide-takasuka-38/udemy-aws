name: Deploy to AWS Lightsail

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  AWS_REGION: ap-northeast-1
  LIGHTSAIL_SERVICE_NAME: github-streamlit-app
  DOCKER_IMAGE_NAME: \${{ github.repository_owner }}/github-streamlit

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üîß Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üê≥ Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: \${{ secrets.DOCKER_USERNAME }}
        password: \${{ secrets.DOCKER_PASSWORD }}

    - name: üèóÔ∏è Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          \${{ env.DOCKER_IMAGE_NAME }}:latest
          \${{ env.DOCKER_IMAGE_NAME }}:\${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: ‚òÅÔ∏è Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: \${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: \${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: \${{ env.AWS_REGION }}

    - name: üì¶ Create deployment configuration
      run: |
        # „Éá„Éó„É≠„Ç§„É°„É≥„ÉàË®≠ÂÆö„Çí‰ΩúÊàê
        cat > deployment.json << 'EOF'
        {
          "app": {
            "image": "\${{ env.DOCKER_IMAGE_NAME }}:\${{ github.sha }}",
            "ports": {
              "8501": "HTTP"
            },
            "environment": {
              "STREAMLIT_SERVER_PORT": "8501",
              "STREAMLIT_SERVER_ADDRESS": "0.0.0.0",
              "ENVIRONMENT": "production"
            }
          }
        }
        EOF

        # „Éë„Éñ„É™„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàË®≠ÂÆö„Çí‰ΩúÊàê
        cat > public-endpoint.json << 'EOF'
        {
          "containerName": "app",
          "containerPort": 8501,
          "healthCheck": {
            "healthyThreshold": 2,
            "unhealthyThreshold": 2,
            "timeoutSeconds": 10,
            "intervalSeconds": 30,
            "path": "/_stcore/health",
            "successCodes": "200-499"
          }
        }
        EOF

        # ‰ΩúÊàê„Åó„Åü„Éï„Ç°„Ç§„É´„ÅÆÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç
        echo "=== Deployment Configuration ==="
        cat deployment.json
        echo ""
        echo "=== Public Endpoint Configuration ==="
        cat public-endpoint.json

    - name: üöÄ Deploy to Lightsail
      id: deploy
      run: |
        echo "Starting deployment to Lightsail..."
        echo "Service Name: \${{ env.LIGHTSAIL_SERVICE_NAME }}"
        echo "AWS Region: \${{ env.AWS_REGION }}"
        echo "Docker Image: \${{ env.DOCKER_IMAGE_NAME }}:\${{ github.sha }}"
        
        # „Éá„Éó„É≠„Ç§„É°„É≥„ÉàÂÆüË°å
        aws lightsail create-container-service-deployment \
          --service-name "\${{ env.LIGHTSAIL_SERVICE_NAME }}" \
          --containers file://deployment.json \
          --public-endpoint file://public-endpoint.json \
          --region "\${{ env.AWS_REGION }}"
        
        echo "Deployment initiated successfully!"

    - name: ‚è≥ Wait for deployment completion
      run: |
        echo "Waiting for deployment to complete..."
        
        # ÊúÄÂ§ß15ÂàÜÂæÖÊ©üÔºà30Âõû √ó 30ÁßíÔºâ
        for i in {1..30}; do
          sleep 30
          
          echo "Checking deployment status (attempt \$i/30)..."
          
          DEPLOYMENT_STATE=\$(aws lightsail get-container-services \
            --service-name "\${{ env.LIGHTSAIL_SERVICE_NAME }}" \
            --region "\${{ env.AWS_REGION }}" \
            --query 'containerServices[0].state' \
            --output text)
          
          echo "Current state: \$DEPLOYMENT_STATE"
          
          case "\$DEPLOYMENT_STATE" in
            "RUNNING")
              echo "‚úÖ Deployment completed successfully!"
              break
              ;;
            "FAILED")
              echo "‚ùå Deployment failed!"
              
              # „Ç®„É©„ÉºË©≥Á¥∞„ÇíÂèñÂæó
              echo "Getting error details..."
              aws lightsail get-container-services \
                --service-name "\${{ env.LIGHTSAIL_SERVICE_NAME }}" \
                --region "\${{ env.AWS_REGION }}"
              
              exit 1
              ;;
            "DEPLOYING"|"UPDATING")
              echo "‚è≥ Still deploying... (\$DEPLOYMENT_STATE)"
              ;;
            *)
              echo "üîÑ Current state: \$DEPLOYMENT_STATE"
              ;;
          esac
          
          if [ \$i -eq 30 ]; then
            echo "‚è∞ Deployment timeout after 15 minutes"
            echo "Final state: \$DEPLOYMENT_STATE"
            exit 1
          fi
        done

    - name: üîç Get service information
      run: |
        echo "Getting service information..."
        
        # „Çµ„Éº„Éì„ÇπÊÉÖÂ†±„ÇíÂèñÂæó
        SERVICE_INFO=\$(aws lightsail get-container-services \
          --service-name "\${{ env.LIGHTSAIL_SERVICE_NAME }}" \
          --region "\${{ env.AWS_REGION }}")
        
        SERVICE_URL=\$(echo "\$SERVICE_INFO" | jq -r '.containerServices[0].url // "Not available"')
        SERVICE_STATE=\$(echo "\$SERVICE_INFO" | jq -r '.containerServices[0].state // "Unknown"')
        POWER=\$(echo "\$SERVICE_INFO" | jq -r '.containerServices[0].power // "Unknown"')
        SCALE=\$(echo "\$SERVICE_INFO" | jq -r '.containerServices[0].scale // "Unknown"')
        
        echo "üìä Deployment Summary:"
        echo "üåê Service URL: \$SERVICE_URL"
        echo "üìä Service State: \$SERVICE_STATE"
        echo "üí™ Power: \$POWER"
        echo "üìè Scale: \$SCALE"
        echo "üè∑Ô∏è Image Tag: \${{ github.sha }}"
        
        # GitHub Summary„Å´Âá∫Âäõ
        {
          echo "## üöÄ Deployment Summary"
          echo ""
          echo "| Property | Value |"
          echo "|----------|-------|"
          echo "| üåê Service URL | [\$SERVICE_URL](\$SERVICE_URL) |"
          echo "| üìä Service State | \$SERVICE_STATE |"
          echo "| üí™ Power | \$POWER |"
          echo "| üìè Scale | \$SCALE |"
          echo "| üè∑Ô∏è Image Tag | \`\${{ github.sha }}\` |"
          echo "| ‚è∞ Deployment Time | \$(date -u +"%Y-%m-%d %H:%M:%S UTC") |"
          echo ""
          echo "### üìã Next Steps"
          echo "1. Visit the application: [\$SERVICE_URL](\$SERVICE_URL)"
          echo "2. Check application logs in AWS Lightsail console"
          echo "3. Monitor application performance"
        } >> "\$GITHUB_STEP_SUMMARY"

    - name: üè• Health check
      run: |
        echo "Performing health check..."
        
        SERVICE_URL=\$(aws lightsail get-container-services \
          --service-name "\${{ env.LIGHTSAIL_SERVICE_NAME }}" \
          --region "\${{ env.AWS_REGION }}" \
          --query 'containerServices[0].url' \
          --output text)
        
        if [ "\$SERVICE_URL" = "null" ] || [ -z "\$SERVICE_URL" ]; then
          echo "‚ö†Ô∏è Could not retrieve service URL for health check"
          exit 0
        fi
        
        echo "üåê Testing URL: \$SERVICE_URL"
        
        # ÊúÄÂ§ß5ÂàÜÈñì„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÆüË°åÔºà10Âõû √ó 30ÁßíÔºâ
        for i in {1..10}; do
          echo "Health check attempt \$i/10..."
          
          if curl -f -s --max-time 30 "\$SERVICE_URL/_stcore/health" > /dev/null 2>&1; then
            echo "‚úÖ Health check passed!"
            echo "üåê Application is healthy at: \$SERVICE_URL"
            break
          elif curl -f -s --max-time 30 "\$SERVICE_URL" > /dev/null 2>&1; then
            echo "‚úÖ Application is responding (basic check)!"
            echo "üåê Application is available at: \$SERVICE_URL"
            break
          else
            echo "‚è≥ Health check failed, retrying in 30 seconds..."
            if [ \$i -lt 10 ]; then
              sleep 30
            fi
          fi
          
          if [ \$i -eq 10 ]; then
            echo "‚ö†Ô∏è Health check failed after 10 attempts"
            echo "The application may still be starting up."
            echo "Please check manually: \$SERVICE_URL"
          fi
        done

  notify:
    name: üì¢ Notify
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    
    steps:
    - name: üì¢ Send notification
      run: |
        if [ "\${{ needs.build-and-deploy.result }}" = "success" ]; then
          echo "‚úÖ Deployment notification: SUCCESS"
          echo "The application has been successfully deployed to AWS Lightsail."
        else
          echo "‚ùå Deployment notification: FAILED"
          echo "The deployment to AWS Lightsail has failed. Please check the logs above."
        fi
