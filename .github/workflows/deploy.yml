name: Deploy to AWS Lightsail

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SERVICE_NAME: inventory-optimization-app
  AWS_REGION: ap-northeast-1
  IMAGE_TAG: latest
  CONTAINER_POWER: small  # nano, micro, small, medium, large, xlarge
  CONTAINER_SCALE: 1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install AWS Lightsail CLI plugin
      run: |
        sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
        sudo chmod +x /usr/local/bin/lightsailctl
    
    - name: Check if container service exists
      id: check-service
      run: |
        SERVICE_EXISTS=$(aws lightsail get-container-services \
          --service-name ${{ env.SERVICE_NAME }} \
          --query "containerServices[0].containerServiceName" \
          --output text 2>/dev/null || echo "None")
        
        if [ "$SERVICE_EXISTS" = "None" ] || [ "$SERVICE_EXISTS" = "null" ]; then
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Container service does not exist"
        else
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Container service already exists"
        fi
    
    - name: Create container service if not exists
      if: steps.check-service.outputs.exists == 'false'
      run: |
        echo "Creating new container service..."
        aws lightsail create-container-service \
          --service-name ${{ env.SERVICE_NAME }} \
          --power ${{ env.CONTAINER_POWER }} \
          --scale ${{ env.CONTAINER_SCALE }} \
          --tags key=Environment,value=Production key=App,value=StreamlitInventoryOptimization
        
        # コンテナサービスがREADY状態になるまで待機
        echo "Waiting for container service to be ready..."
        for i in {1..40}; do
          SERVICE_STATE=$(aws lightsail get-container-services \
            --service-name ${{ env.SERVICE_NAME }} \
            --query "containerServices[0].state" \
            --output text)
          
          echo "Service state: $SERVICE_STATE ($i/40)"
          
          if [ "$SERVICE_STATE" = "READY" ]; then
            echo "Container service is ready!"
            break
          elif [ "$SERVICE_STATE" = "PENDING" ] || [ "$SERVICE_STATE" = "CREATING" ] || [ "$SERVICE_STATE" = "DEPLOYING" ]; then
            echo "Service is still being created..."
            sleep 30
          elif [ "$SERVICE_STATE" = "DISABLED" ]; then
            echo "Service is disabled. Enabling..."
            aws lightsail update-container-service \
              --service-name ${{ env.SERVICE_NAME }} \
              --no-is-disabled
            sleep 30
          else
            echo "Error: Unexpected service state: $SERVICE_STATE"
            exit 1
          fi
          
          if [ $i -eq 40 ]; then
            echo "Timeout waiting for service to be ready"
            exit 1
          fi
        done
    
    - name: Update container service if needed
      if: steps.check-service.outputs.exists == 'true'
      run: |
        # 既存のサービスの状態を確認
        SERVICE_STATE=$(aws lightsail get-container-services \
          --service-name ${{ env.SERVICE_NAME }} \
          --query "containerServices[0].state" \
          --output text)
        
        echo "Current service state: $SERVICE_STATE"
        
        # DISABLEDの場合は有効化
        if [ "$SERVICE_STATE" = "DISABLED" ]; then
          echo "Enabling container service..."
          aws lightsail update-container-service \
            --service-name ${{ env.SERVICE_NAME }} \
            --no-is-disabled
          
          # 有効化を待つ
          for i in {1..20}; do
            SERVICE_STATE=$(aws lightsail get-container-services \
              --service-name ${{ env.SERVICE_NAME }} \
              --query "containerServices[0].state" \
              --output text)
            
            if [ "$SERVICE_STATE" = "READY" ]; then
              break
            fi
            echo "Waiting for service to be enabled... ($i/20)"
            sleep 10
          done
        fi
        
        # 必要に応じてコンテナサービスのスペックを更新
        CURRENT_POWER=$(aws lightsail get-container-services \
          --service-name ${{ env.SERVICE_NAME }} \
          --query "containerServices[0].power" \
          --output text)
        
        CURRENT_SCALE=$(aws lightsail get-container-services \
          --service-name ${{ env.SERVICE_NAME }} \
          --query "containerServices[0].scale" \
          --output text)
        
        if [ "$CURRENT_POWER" != "${{ env.CONTAINER_POWER }}" ] || [ "$CURRENT_SCALE" != "${{ env.CONTAINER_SCALE }}" ]; then
          echo "Updating container service configuration..."
          aws lightsail update-container-service \
            --service-name ${{ env.SERVICE_NAME }} \
            --power ${{ env.CONTAINER_POWER }} \
            --scale ${{ env.CONTAINER_SCALE }}
          
          # 更新が完了するまで待機
          sleep 30
        else
          echo "Container service configuration is up to date"
        fi
    
    - name: Build Docker image
      run: |
        docker build -t ${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }} .
    
    - name: Push Docker image to Lightsail
      run: |
        # サービスがREADY状態であることを確認
        SERVICE_STATE=$(aws lightsail get-container-services \
          --service-name ${{ env.SERVICE_NAME }} \
          --query "containerServices[0].state" \
          --output text)
        
        if [ "$SERVICE_STATE" != "READY" ]; then
          echo "Waiting for service to be ready before pushing image..."
          for i in {1..10}; do
            SERVICE_STATE=$(aws lightsail get-container-services \
              --service-name ${{ env.SERVICE_NAME }} \
              --query "containerServices[0].state" \
              --output text)
            
            if [ "$SERVICE_STATE" = "READY" ]; then
              break
            fi
            echo "Current state: $SERVICE_STATE, waiting... ($i/10)"
            sleep 30
          done
        fi
        
        echo "Pushing Docker image to Lightsail..."
        aws lightsail push-container-image \
          --service-name ${{ env.SERVICE_NAME }} \
          --label ${{ env.SERVICE_NAME }}-${{ github.sha }} \
          --image ${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}
    
    - name: Get Lightsail image name
      id: lightsail-image
      run: |
        # 最新のイメージを取得
        IMAGE_NAME=$(aws lightsail get-container-images \
          --service-name ${{ env.SERVICE_NAME }} \
          --query "containerImages[0].image" \
          --output text)
        echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT
        echo "Using image: $IMAGE_NAME"
    
    - name: Create deployment configuration
      run: |
        cat > deployment.json <<EOF
        {
          "containers": {
            "app": {
              "image": "${{ steps.lightsail-image.outputs.image }}",
              "ports": {
                "8501": "HTTP"
              },
              "environment": {
                "STREAMLIT_SERVER_PORT": "8501",
                "STREAMLIT_SERVER_ADDRESS": "0.0.0.0"
              },
              "command": [],
              "cpu": 256,
              "ramInGb": 0.5
            }
          },
          "publicEndpoint": {
            "containerName": "app",
            "containerPort": 8501,
            "healthCheck": {
              "healthyThreshold": 2,
              "unhealthyThreshold": 2,
              "timeoutSeconds": 10,
              "intervalSeconds": 30,
              "path": "/",
              "successCodes": "200-499"
            }
          }
        }
        EOF
    
    - name: Deploy to Lightsail
      run: |
        aws lightsail create-container-service-deployment \
          --service-name ${{ env.SERVICE_NAME }} \
          --cli-input-json file://deployment.json
    
    - name: Wait for deployment to complete
      run: |
        echo "Waiting for deployment to complete..."
        
        for i in {1..60}; do
          DEPLOYMENT_STATE=$(aws lightsail get-container-service-deployments \
            --service-name ${{ env.SERVICE_NAME }} \
            --query "deployments[0].state" \
            --output text)
          
          echo "Deployment state: $DEPLOYMENT_STATE ($i/60)"
          
          if [ "$DEPLOYMENT_STATE" = "ACTIVE" ]; then
            echo "Deployment completed successfully!"
            break
          elif [ "$DEPLOYMENT_STATE" = "FAILED" ]; then
            echo "Deployment failed!"
            
            # エラーの詳細を表示
            aws lightsail get-container-service-deployments \
              --service-name ${{ env.SERVICE_NAME }} \
              --query "deployments[0]"
            exit 1
          elif [ "$DEPLOYMENT_STATE" = "ACTIVATING" ] || [ "$DEPLOYMENT_STATE" = "INACTIVE" ]; then
            echo "Deployment in progress..."
          else
            echo "Current deployment state: $DEPLOYMENT_STATE"
          fi
          
          sleep 10
        done
    
    - name: Get service URL
      run: |
        SERVICE_URL=$(aws lightsail get-container-services \
          --service-name ${{ env.SERVICE_NAME }} \
          --query "containerServices[0].url" \
          --output text)
        
        echo "----------------------------------------"
        echo "Deployment completed!"
        echo "Service URL: https://$SERVICE_URL"
        echo "----------------------------------------"
        
        # GitHub Actionsのサマリーに追加
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Service Name**: ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: https://$SERVICE_URL" >> $GITHUB_STEP_SUMMARY
        echo "- **Power**: ${{ env.CONTAINER_POWER }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Scale**: ${{ env.CONTAINER_SCALE }}" >> $GITHUB_STEP_SUMMARY
